{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT14, GearSetting.RATIO_6_1, False)\nleft_motor_b = Motor(Ports.PORT18, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_6_1, True)\nright_motor_b = Motor(Ports.PORT13, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 333.375, 292.09999999999997, MM, 1)\ndigital_out_g = DigitalOut(brain.three_wire_port.g)\ndigital_out_h = DigitalOut(brain.three_wire_port.h)\ngps_5 = Gps(Ports.PORT5, 139.70, 38.10, MM, 0)\nRamp_Motor = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nintake_motor_a = Motor(Ports.PORT15, GearSetting.RATIO_18_1, True)\nintake_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nintake = MotorGroup(intake_motor_a, intake_motor_b)\nGyro_Sensor = Inertial(Ports.PORT21)\n# vex-vision-config:begin\nvision_10 = Vision(Ports.PORT10, 50)\n# vex-vision-config:end\nright_rotation = Rotation(Ports.PORT17, False)\nleft_rotation = Rotation(Ports.PORT16, True)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# Import required libraries\nimport math\n\n# Parameters for turning PID control\nturn_kP = 0.3     # Proportional constant\nturn_kI = 0.003   # Integral constant#.001 works for heading really well\nturn_kD = 0.4    # Derivative constant\nturn_tolerance = 2  # Acceptable error in degrees\nmin_turn_speed = 5  # Minimum turn speed to overcome friction\nmax_turn_speed = 75 # Maximum turn speed\n\ndef normalize_heading(heading):\n    \"\"\"Normalize heading to be between 0-360 degrees\"\"\"\n    while heading < 0:\n        heading += 360\n    while heading >= 360:\n        heading -= 360\n    return heading\n\ndef shortest_angle_difference(target, current):\n    \"\"\"Calculate the shortest angle to turn (handles wraparound)\"\"\"\n    diff = normalize_heading(target) - normalize_heading(current)\n    \n    # Handle cases where turning the other way is shorter\n    if diff > 180:\n        diff -= 360\n    elif diff < -180:\n        diff += 360\n        \n    return diff\n\ndef turn_to_heading(target_heading, max_speed):\n    \"\"\"\n    Turn the robot to a specific heading using PID control with GPS sensor\n    \n    Args:\n        target_heading: Target heading in degrees (0-360)\n        max_speed: Maximum turning speed (0-100)\n    \"\"\"\n    print(\"Starting turn to heading: \",target_heading,\" degrees\")\n    \n    # Normalize target heading to 0-360 range\n    target_heading = normalize_heading(target_heading)\n    \n    # PID variables\n    integral = 0\n    prev_error = 0\n    \n    # Initial error calculation\n    current_heading = gps_5.heading()\n    error = shortest_angle_difference(target_heading, current_heading)\n    \n    # Continue until we're close enough to the target\n    timer = Timer()  # Used to detect if we're stuck\n    timer.reset()\n    \n    while abs(error) > turn_tolerance:\n        # Get current heading from GPS\n        current_heading = gps_5.heading()\n        \n        # Calculate error (how far we still need to turn)\n        error = shortest_angle_difference(target_heading, current_heading)\n        \n        # Calculate integral (sum of errors over time)\n        integral += error\n        \n        # Prevent integral windup\n        if abs(integral) > 1000:\n            integral = 1000 if integral > 0 else -1000\n        \n        # If we're not making progress, reset integral\n        if timer.time(SECONDS) > 2:\n            if abs(prev_error - error) < 1:\n                integral = 0\n                print(\"Progress stalled, resetting integral\")\n            timer.reset()\n        \n        # Calculate derivative (rate of change of error)\n        derivative = error - prev_error\n        \n        # Calculate motor power using PID\n        power = (error * turn_kP) + (integral * turn_kI) + (derivative * turn_kD)\n        \n        # Ensure minimum power to overcome friction\n        if 0 < abs(power) < min_turn_speed:\n            power = min_turn_speed * (1 if power > 0 else -1)\n        \n        # Limit power to specified maximum\n        if abs(power) > max_speed:\n            power = max_speed * (1 if power > 0 else -1)\n        \n        # Apply motor power for turning\n        # Positive error means we need to turn clockwise\n        left_drive_smart.spin(FORWARD, power, PERCENT)\n        right_drive_smart.spin(REVERSE, power, PERCENT)\n        \n        # Debug info\n        # print(\"Current: \",current_heading,\" Target: \",target_heading,\" Err: \",error,\" Power: \",power)\n        # print(\"GPS Position X: \",gps_5.x_position(INCHES),\" mm Y: \",gps_5.y_position(INCHES),\" mm\")\n        \n        # Update previous error for next iteration\n        prev_error = error\n        \n        # Short delay to prevent CPU hogging\n        wait(20, MSEC)\n    \n    # Stop the robot once target is reached\n    left_drive_smart.stop(BRAKE)\n    right_drive_smart.stop(BRAKE)\n    print(\"Target heading reached: Current= \",gps_5.heading(),\" Target= \",target_heading)\n\ndef turn_by_angle(angle_degrees, max_speed):\n    \"\"\"\n    Turn the robot by a relative angle using the GPS sensor\n    \n    Args:\n        angle_degrees: Angle to turn in degrees (positive=clockwise, negative=counter-clockwise)\n        max_speed: Maximum turning speed (0-100)\n    \"\"\"\n    # Get current heading\n    current_heading = gps_5.heading()\n    \n    # Calculate target heading\n    target_heading = normalize_heading(current_heading + angle_degrees)\n    \n    print(\"Starting relative turn of \",angle_degrees,\" degrees\")\n    print(\"Current heading: \",current_heading,\" Target heading: \",target_heading)\n    \n    # Execute the turn\n    turn_to_heading(target_heading, max_speed)\n    wait(100,MSEC)\n\n    if(gps_5.heading() != target_heading):\n        print (\"calling again...\\nheading: \", gps_5.heading(),\" target: \", target_heading)\n        turn_to_heading(target_heading, max_speed)\n   \n    if(gps_5.heading() != target_heading):\n        print (\"calling again...\\nheading: \", gps_5.heading(),\" target: \", target_heading)\n        turn_to_heading(target_heading, max_speed)\n\n# PID constants for straight driving correction\n# These values need tuning for your specific robot\n# kP = 0.1  # Proportional gain\n# kI = 0.01  # Integral gain\n# kD = 0.2   # Derivative gain\n\nkP = -0.01  # Proportional gain\nkI = -0.02  # Integral gain\nkD = 0.0   # Derivative gain\n\n# Maximum allowed integral value to prevent wind-up\nMAX_INTEGRAL = 50\n\n# Function to reset rotation sensors\ndef reset_rotations():\n    left_rotation.reset_position()\n    right_rotation.reset_position()\n    \n# Function to drive straight for a specific distance in degrees using PID\ndef drive_straight_pid(distance_deg, speed_pct):\n    # Reset rotation sensors\n    reset_rotations()\n    \n    # Target position and PID variables\n    target_position = abs(distance_deg)\n    direction = 1 if distance_deg > 0 else -1  # Determine direction\n    \n    # PID variables\n    prev_error = 0\n    integral = 0\n    \n    # Control loop variables\n    average_position = 0\n    last_time = brain.timer.time(MSEC)\n    \n    # Loop until we reach the target distance\n    while average_position < target_position:\n        # Calculate time delta for derivative calculation\n        current_time = brain.timer.time(MSEC)\n        dt = current_time - last_time\n        dt = max(dt, 1)  # Prevent division by zero\n        last_time = current_time\n        \n        # Get current position from both rotation sensors\n        left_position = abs(left_rotation.position(DEGREES))\n        right_position = abs(right_rotation.position(DEGREES))\n        \n        # Calculate average position and error (difference between sensors)\n        average_position = (left_position + right_position) / 2\n        position_error = left_position - right_position\n        \n        # Calculate PID components\n        # Proportional term\n        p_term = position_error * kP\n        \n        # Integral term with anti-windup\n        integral += position_error * dt / 1000.0\n        integral = max(min(integral, MAX_INTEGRAL), -MAX_INTEGRAL)  # Clamp to prevent windup\n        i_term = integral * kI\n        \n        # Derivative term\n        derivative = (position_error - prev_error) / (dt / 1000.0)\n        d_term = derivative * kD\n        \n        # Calculate total correction\n        correction = p_term + i_term + d_term\n        \n        # Store error for next iteration\n        prev_error = position_error\n        \n        # Apply the correction to the motors\n        left_speed = speed_pct * direction + correction\n        right_speed = speed_pct * direction - correction\n        \n        # Constrain speeds to valid range (-100 to 100)\n        left_speed = max(min(left_speed, 100), -100)\n        right_speed = max(min(right_speed, 100), -100)\n        \n        # Set motor speeds\n        left_motor_a.spin(FORWARD, left_speed, PERCENT)\n        left_motor_b.spin(FORWARD, left_speed, PERCENT)\n        right_motor_a.spin(FORWARD, right_speed, PERCENT)\n        right_motor_b.spin(FORWARD, right_speed, PERCENT)\n        \n        # Small delay to avoid hogging CPU\n        wait(20, MSEC)\n        \n        # Display debug information\n        print(\"L: \",left_position,\" R: \",right_position,\" E: \",position_error,\" P: \",(average_position/target_position*100))\n        print(\"P: \",p_term,\" I: \",i_term,\" D: \",d_term,\"\\n\")\n        \n    # Stop all motors\n    left_motor_a.stop(BRAKE)\n    left_motor_b.stop(BRAKE)\n    right_motor_a.stop(BRAKE)\n    right_motor_b.stop(BRAKE)\n    \n    # brain.screen.set_cursor(6, 1)\n    # brain.screen.print(\"Drive complete!\")\n    print(\"Drive complete!\")\n    \n    return True\n\n# Function to aim for a specific distance and handle timeouts\ndef drive_distance_with_timeout(distance_deg, speed_pct, timeout_sec):\n     # Wait for rotation sensors to initialize\n    wait(100, MSEC)\n\n    # Start timer\n    timer = Timer()\n    \n    # Execute drive function with timeout\n    success = drive_straight_pid(distance_deg, speed_pct)\n    \n    # Check if timeout occurred\n    # #if timer.time(SECONDS) >= timeout_sec:\n    #     # brain.screen.set_cursor(7, 1)\n    #     # brain.screen.print(\"Drive timed out!\")\n    #     print(\"Drive timed out!\")\n    #     print(\"Drive complete!\")\n        \n    #     # Stop all motors\n    #     left_motor_a.stop(BRAKE)\n    #     left_motor_b.stop(BRAKE)\n    #     right_motor_a.stop(BRAKE)\n    #     right_motor_b.stop(BRAKE)\n    #     return False\n    \n    return success\n\n\nwheelDiameter=2.75 # Inches\nwheelCircumference = math.pi * wheelDiameter\ntravelDistance = 48 # Inches\nerror = 5 # inches\nnumberOfDegrees = (travelDistance/wheelCircumference) * 360\nspeed = 75\n\nturnAngle = 90\n\ndef redPositiveTurnToPos(xGoal, yGoal) :\n    xGoal = abs(xGoal)\n    yGoal = abs(yGoal)\n    xPos = abs(gps_5.x_position(INCHES))\n    yPos = abs(gps_5.y_position(INCHES))\n    print(\"absolute value of arctan: \",((180/math.pi)*abs(math.atan((xGoal-xPos)/(yGoal-yPos)))))\n    if(xGoal<xPos) :\n        posTurn =180 - ((180/math.pi)*abs(math.atan((xGoal-xPos)/(yGoal-yPos))))\n    elif(xGoal>xPos) :\n        posTurn =180 + ((180/math.pi)*abs(math.atan((xGoal-xPos)/(yGoal-yPos))))\n    \n    print(\"Current GPS heading: \",gps_5.heading())\n    print(\"TurnHeading goal: \",posTurn)\n    turn_to_heading(posTurn, 30)\n    wait(.3, SECONDS)\n    turn_to_heading(posTurn, 30)\n    print(\"Current GPS heading: \",gps_5.heading())\n    numberOfDegrees = ((math.sqrt((xGoal-xPos)*(xGoal-xPos)+((yGoal-yPos)*(yGoal-yPos)))/wheelCircumference)) * 360\n    drive_distance_with_timeout(numberOfDegrees, 40, 100)#speed, 5)\n    \ntravelDistance -= error\n\n\ndef pistonOut() :\n    digital_out_g.set(True)\n    digital_out_h.set(True)\n\ndef pistonIn() : \n    digital_out_g.set(False)\n    digital_out_h.set(False)\n\ndef intakeIn() :\n    intake_motor_a.spin(FORWARD)\n    intake_motor_b.spin(FORWARD)\n\ndef intakeOut() :\n    intake_motor_a.spin(REVERSE)\n    intake_motor_b.spin(REVERSE)\n# Main program\ndef main():\n    # gps_5.calibrate()\n    print(\"Starting GPS navigation program\")\n    print(\"Current GPS heading: \",gps_5.heading())\n    print(\"Current GPS position: X= \",gps_5.x_position(INCHES), \" IN Y= \",gps_5.y_position(INCHES),\" IN\")\n    \n    redPositiveTurnToPos(-55, -40)\n    # # Allow GPS to calibrate if needed\n    # intake_motor_a.set_velocity(100, PERCENT)\n    # intake_motor_b.set_velocity(100, PERCENT)\n    # Ramp_Motor.set_velocity(100, PERCENT)\n    # pistonOut()\n    # wait(1, SECONDS)\n\n    # # Wait for user to press a button to start\n    # print(\"Running Auto\")\n\n    # #grab Stake\n    # travelDistance = -15\n    # numberOfDegrees = (travelDistance/wheelCircumference) * 360\n    # drive_distance_with_timeout(numberOfDegrees, 40, 100)#speed, 5)\n    # pistonIn()\n    # Ramp_Motor.spin(REVERSE)\n    # wait(.4, SECONDS)\n    # #turn to ring 2\n    # turn_by_angle(28,speed)\n    # intakeIn()\n    # wait(.2, SECONDS)\n    \n    # #move to ring 2\n    # numberOfDegrees = (8/wheelCircumference) * 360\n    # drive_distance_with_timeout(numberOfDegrees, 40, 100)#speed, 5)\n    # wait(.1, SECONDS)\n    # #turn to ring 3\n    # turn_to_heading(170, speed)\n    # wait(.7, SECONDS)\n    # turn_to_heading(170, speed)\n    # wait(.3, SECONDS)\n    # #move to ring 3\n    # numberOfDegrees = (40/wheelCircumference) * 360\n    # drive_distance_with_timeout(numberOfDegrees, 40, 100)#speed, 5)\n    # wait(1, SECONDS)\n    # turn_to_heading(45, 40)\n    # wait(.3, SECONDS)\n    # turn_to_heading(45, 40)\n    # numberOfDegrees = (-23/wheelCircumference) * 360\n    # drive_distance_with_timeout(numberOfDegrees, 40, 100)#speed, 5)\n    # turn_by_angle(-8,speed)\n\n    while True:\n        \n        if controller_1.buttonA.pressing():\n            print(\"Button A pressed, turning to absolute heading 270°\")\n            turn_to_heading(turnAngle, speed) # turn to (absolute degree, speed)\n            # turn_to_heading(turnAngle, speed) # turn to (absolute degree, speed)\n            # turn_to_heading(turnAngle, speed) # turn to (absolute degree, speed)\n            # break\n        elif controller_1.buttonB.pressing():\n            print(\"Button B pressed, turning 90° clockwise\")\n            gpsHeading = gps_5.heading()\n\n            turn_by_angle(turnAngle,speed)\n            # break\n        elif controller_1.buttonX.pressing():\n            print(\"Button X pressed, driving straight\")\n                        \n            # Drive forward  degrees at speed with 5 second timeout\n            drive_distance_with_timeout(numberOfDegrees, 40, 5)#speed, 5)\n            # break\n        wait(50, MSEC)\n    \n    print(\"Program complete\")\n\n# Run the main program\nprint(\"running main\")\nmain()\n","textLanguage":"python","robotConfig":[{"port":[14,18,12,13,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio6_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"13.125","unit":"in","wheelbase":"11.5","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[7],"name":"digital_out_g","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[8],"name":"digital_out_h","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[5],"name":"gps_5","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"5.5","xOffsetUnit":"in","yOffset":"1.5","yOffsetUnit":"in","thetaOffset":"0"},"triportSourcePort":22},{"port":[2],"name":"Ramp_Motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[15,20],"name":"intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[21],"name":"Gyro_Sensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22},{"port":[10],"name":"vision_10","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_1\"},\"range\":2.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[17],"name":"right_rotation","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"},"triportSourcePort":22},{"port":[16],"name":"left_rotation","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}