{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_back = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nright_back = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nright_front = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)\nleft_front = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\ngps_7 = Gps(Ports.PORT7, -127.00, 50.80, MM, 90)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_x_b_buttons_control_motors_stopped = True\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global controller_1_x_b_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # check the buttonX/buttonB status\n            # to control right_back\n            if controller_1.buttonX.pressing():\n                right_back.spin(FORWARD)\n                controller_1_x_b_buttons_control_motors_stopped = False\n            elif controller_1.buttonB.pressing():\n                right_back.spin(REVERSE)\n                controller_1_x_b_buttons_control_motors_stopped = False\n            elif not controller_1_x_b_buttons_control_motors_stopped:\n                right_back.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_x_b_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\nimport math\nfrom vex import *\n\n# Controller for driver input\ncontroller = Controller(PRIMARY)\n\n# GPS sensor for tracking orientation and position\n# GPS connected to port 7 as specified\ngps_7 = Gps(Ports.PORT7, -127, 50.8)  # Parameters: port, x_offset, y_offset (mm)\n\n# Define drivetrain motors\nleft_back = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nright_back = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nright_front = Motor(Ports.PORT9, GearSetting.RATIO_6_1, True)\nleft_front = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\n\n# Physical dimensions of the robot\nWHEEL_DIAMETER = 2  # inches\nTRACK_WIDTH = 14    # inches\nWHEELBASE = 9       # inches\nWHEEL_CIRCUMFERENCE = WHEEL_DIAMETER * math.pi\n\n# PID Constants for turning\n# These values will need to be tuned for your specific robot\nkP = 0.5      # Proportional - how hard to correct based on error\nkI = 0.002    # Integral - handles steady-state errors\nkD = 0.1      # Derivative - provides damping to prevent oscillation\n\n# PID variables\nturn_error = 0       # Current error (target angle - current angle)\nturn_prev_error = 0  # Previous error, used for derivative calculation\nturn_integral = 0    # Sum of errors over time\nturn_derivative = 0  # Rate of change of error\n\n# Constants for turn control\nMAX_TURNING_POWER = 80  # Maximum motor power for turning (0-100)\nANGLE_TOLERANCE = 2     # Acceptable error in degrees\nINTEGRAL_LIMIT = 400    # Prevent integral windup\nSETTLE_TIME_MS = 300    # Time robot must be within tolerance to consider turn complete\n\ndef reset_pid_variables():\n    \"\"\"Reset all PID variables for a new turn operation.\"\"\"\n    global turn_error, turn_prev_error, turn_integral, turn_derivative\n    turn_error = 0\n    turn_prev_error = 0\n    turn_integral = 0\n    turn_derivative = 0\n\ndef normalize_angle(angle):\n    \"\"\"Normalize angle to be between 0 and 360 degrees.\"\"\"\n    return angle % 360\n\ndef shortest_angle_distance(from_angle, to_angle):\n    \"\"\"Calculate the shortest distance between two angles.\"\"\"\n    # Normalize angles\n    from_angle = normalize_angle(from_angle)\n    to_angle = normalize_angle(to_angle)\n    \n    # Calculate both possible directions and choose the shortest\n    clockwise = normalize_angle(to_angle - from_angle)\n    counter_clockwise = normalize_angle(from_angle - to_angle)\n    \n    if clockwise <= counter_clockwise:\n        return clockwise\n    else:\n        return -counter_clockwise\n\ndef calculate_pid_output(target_angle):\n    \"\"\"Calculate PID output based on target angle and current GPS heading.\"\"\"\n    global turn_error, turn_prev_error, turn_integral, turn_derivative\n    \n    # Get current heading from GPS\n    current_angle = gps_7.heading()\n    \n    # Calculate error using shortest angle distance\n    turn_error = shortest_angle_distance(current_angle, target_angle)\n    \n    # Calculate integral (sum of errors over time)\n    turn_integral += turn_error\n    \n    # Anti-windup: limit the integral to prevent excessive accumulation\n    if turn_integral > INTEGRAL_LIMIT:\n        turn_integral = INTEGRAL_LIMIT\n    elif turn_integral < -INTEGRAL_LIMIT:\n        turn_integral = -INTEGRAL_LIMIT\n    \n    # Calculate derivative (rate of change of error)\n    turn_derivative = turn_error - turn_prev_error\n    \n    # Save current error for next iteration\n    turn_prev_error = turn_error\n    \n    # Calculate PID output\n    pid_output = (kP * turn_error) + (kI * turn_integral) + (kD * turn_derivative)\n    \n    # Limit the output to the maximum turning power\n    if pid_output > MAX_TURNING_POWER:\n        pid_output = MAX_TURNING_POWER\n    elif pid_output < -MAX_TURNING_POWER:\n        pid_output = -MAX_TURNING_POWER\n    \n    return pid_output\n\ndef turn_to_angle(target_angle):\n    \"\"\"Turn the robot to a specific angle using PID control with GPS feedback.\"\"\"\n    reset_pid_variables()\n    \n    # Variables to track settling time\n    settle_timer = Timer()\n    is_settled = False\n    \n    # Keep turning until we're within tolerance for the required settle time\n    while not is_settled:\n        # Calculate motor power using PID\n        motor_power = calculate_pid_output(target_angle)\n        \n        # Apply motor power to perform the turn\n        left_front.spin(FORWARD, motor_power, PERCENT)\n        left_back.spin(FORWARD, motor_power, PERCENT)\n        right_front.spin(REVERSE, motor_power, PERCENT)\n        right_back.spin(REVERSE, motor_power, PERCENT)\n        \n        # Check if we're within tolerance\n        if abs(turn_error) <= ANGLE_TOLERANCE:\n            # If timer hasn't started yet, start it\n            if settle_timer.time() == 0:\n                settle_timer.reset()\n            \n            # If we've been within tolerance for long enough, we're done\n            if settle_timer.time(MSEC) >= SETTLE_TIME_MS:\n                is_settled = True\n        else:\n            # Reset the timer if we're outside tolerance\n            settle_timer.reset()\n        \n        # Brief wait to prevent CPU hogging\n        wait(20, MSEC)\n        \n\n    \n    # Stop motors after turn is complete\n    left_front.stop()\n    left_back.stop()\n    right_front.stop()\n    right_back.stop()\n    \n\n\ndef turn_to_position(target_x, target_y):\n    \"\"\"Turn the robot to face a specific coordinate position.\"\"\"\n    # Get current position from GPS\n    current_x = gps_7.x_position(MM)\n    current_y = gps_7.y_position(MM)\n    \n    # Calculate angle to target position\n    delta_x = target_x - current_x\n    delta_y = target_y - current_y\n    \n    # Calculate target angle in degrees, handling possible division by zero\n    if delta_x == 0:\n        if delta_y > 0:\n            target_angle = 0  # North\n        else:\n            target_angle = 180  # South\n    else:\n        # Calculate angle in radians and convert to degrees\n        angle_rad = math.atan2(delta_y, delta_x)\n        target_angle = normalize_angle(90 - math.degrees(angle_rad))  # Convert to field-oriented heading\n    \n    # Turn to the calculated angle\n    turn_to_angle(target_angle)\n\ndef initialize_gps():\n    \"\"\"Initialize the GPS sensor.\"\"\"\n\n    \n    # Give GPS time to initialize\n    wait(2000, MSEC)\n    \n    # Check if GPS has valid data\n    try:\n        # Try to read heading to verify GPS is working\n        heading = gps_7.heading()\n\n    except:\n     print(\"a\")\n\ndef display_gps_info():\n    \"\"\"Display current GPS information on the controller screen.\"\"\"\n    controller.screen.clear_screen()\n    controller.screen.set_cursor(1, 1)\n    \n    controller.screen.set_cursor(2, 1)\n\n    controller.screen.set_cursor(3, 1)\n\n\ndef main():\n    # Initialize sensors\n    initialize_gps()\n    \n    # Example usage with both angle and position capabilities\n\n    \n    while True:\n        # Display current GPS info\n        if controller.buttonUp.pressing():\n            display_gps_info()\n        \n        # Angle-based turning\n        if controller_1.buttonA.pressing():\n\n            turn_to_angle(90)\n            wait(1000, MSEC)\n        elif controller_1.buttonB.pressing():\n\n            turn_to_angle(180)\n            wait(1000, MSEC)\n        elif controller.buttonY.pressing():\n\n            turn_to_angle(0)\n            wait(1000, MSEC)\n            \n        # Position-based turning\n        elif controller.buttonX.pressing():\n            # Example: Turn to face position (1000, 1000) in mm\n            turn_to_position(1000, 1000)\n            wait(1000, MSEC)\n        elif controller.buttonRight.pressing():\n            # Turn to face position (2000, 0) in mm\n            turn_to_position(2000, 0)\n            wait(1000, MSEC)\n        elif controller.buttonLeft.pressing():\n            # Turn to face position (0, 0) in mm\n            turn_to_position(0, 0)\n            wait(1000, MSEC)\n            \n        # Brief wait to prevent CPU hogging\n        wait(20, MSEC)\n\n# Run the main program\nif __name__ == \"__main__\":\n    main()","textLanguage":"python","robotConfig":[{"port":[2],"name":"left_back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"right_back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[9],"name":"right_front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[10],"name":"left_front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"right_back","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[7],"name":"gps_7","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"-127","xOffsetUnit":"mm","yOffset":"50.8","yOffsetUnit":"mm","thetaOffset":"90"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}