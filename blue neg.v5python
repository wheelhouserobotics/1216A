{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Classification Competition Element IDs\nclass GameElements:\n    MOBILE_GOAL = 0\n    RED_RING = 1\n    BLUE_RING = 2\nleft_motor_a = Motor(Ports.PORT17, GearSetting.RATIO_6_1, False)\nleft_motor_b = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\nright_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 299.24, 285.75, 228.6, MM, 1)\noptical_8 = Optical(Ports.PORT8)\narm_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\narm_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\narm = MotorGroup(arm_motor_a, arm_motor_b)\nclimb_motor_a = Motor(Ports.PORT15, GearSetting.RATIO_36_1, True)\nclimb_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)\nclimb = MotorGroup(climb_motor_a, climb_motor_b)\narmRot = Rotation(Ports.PORT7, False)\nrotation_right = Rotation(Ports.PORT19, False)\nrotation_left = Rotation(Ports.PORT16, False)\ngps_20 = Gps(Ports.PORT20, 0.00, -152.40, MM, 180)\n# AI Vision Color Descriptions\n# AI Vision Code Descriptions\nai_vision_10 = AiVision(Ports.PORT10, AiVision.ALL_AIOBJS)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# Import required libraries\nfrom vex import *\nimport math\n# import threading\n\nringsOnStake = 0\nfullStake = False;\n# Parameters for turning PID control\nturn_kP = 0.01   # Proportional constant\nturn_kI = 0.008   # Integral constant#.001 works for heading really well\nturn_kD = 0.008    # Derivative constant\nturn_tolerance = 2  # Acceptable error in degrees\nmin_turn_speed = 5  # Minimum turn speed to overcome friction\nmax_turn_speed = 75 # Maximum turn speed\nvisionDetects = False;\nrampSpinning = False;\nspinDirection = 0\ndef normalize_heading(heading):\n    \"\"\"Normalize heading to be between 0-360 degrees\"\"\"\n    while heading < 0:\n        heading += 360\n    while heading >= 360:\n        heading -= 360\n    return heading\n\ndef shortest_angle_difference(target, current):\n    \"\"\"Calculate the shortest angle to turn (handles wraparound)\"\"\"\n    diff = normalize_heading(target) - normalize_heading(current)\n    \n    # Handle cases where turning the other way is shorter\n    if diff > 180:\n        diff -= 360\n    elif diff < -180:\n        diff += 360\n        \n    return diff\n\ndef turn_to_heading(target_heading, max_speed):\n    \"\"\"\n    Turn the robot to a specific heading using PID control with GPS sensor\n    \n    Args:\n        target_heading: Target heading in degrees (0-360)\n        max_speed: Maximum turning speed (0-100)\n    \"\"\"\n    print(\"Starting turn to heading: \",target_heading,\" degrees\")\n    \n    # Normalize target heading to 0-360 range\n    target_heading = normalize_heading(target_heading)\n    \n    # PID variables\n    integral = 0\n    prev_error = 0\n    \n    # Initial error calculation\n    current_heading = gps_20.heading()\n    error = shortest_angle_difference(target_heading, current_heading)\n    \n    # Continue until we're close enough to the target\n    timer = Timer()  # Used to detect if we're stuck\n    timer.reset()\n    \n    while abs(error) > turn_tolerance:\n        # Get current heading from GPS\n        current_heading = gps_20.heading()\n        \n        # Calculate error (how far we still need to turn)\n        error = shortest_angle_difference(target_heading, current_heading)\n        \n        # Calculate integral (sum of errors over time)\n        integral += error\n        \n        # Prevent integral windup\n        if abs(integral) > 1000:\n            integral = 1000 if integral > 0 else -1000\n        \n        # If we're not making progress, reset integral\n        if timer.time(SECONDS) > 2:\n            if abs(prev_error - error) < 1:\n                integral = 0\n                print(\"Progress stalled, resetting integral\")\n            timer.reset()\n        \n        # Calculate derivative (rate of change of error)\n        derivative = error - prev_error\n        \n        # Calculate motor power using PID\n        power = (error * turn_kP) + (integral * turn_kI) + (derivative * turn_kD)\n        \n        # Ensure minimum power to overcome friction\n        if 0 < abs(power) < min_turn_speed:\n            power = min_turn_speed * (1 if power > 0 else -1)\n        \n        # Limit power to specified maximum\n        if abs(power) > max_speed:\n            power = max_speed * (1 if power > 0 else -1)\n        \n        # Apply motor power for turning\n        # Positive error means we need to turn clockwise\n        left_drive_smart.spin(FORWARD, power, PERCENT)\n        right_drive_smart.spin(REVERSE, power, PERCENT)\n        \n        # Debug info\n        # print(\"Current: \",current_heading,\" Target: \",target_heading,\" Err: \",error,\" Power: \",power)\n        # print(\"GPS Position X: \",gps_5.x_position(INCHES),\" mm Y: \",gps_5.y_position(INCHES),\" mm\")\n        \n        # Update previous error for next iteration\n        prev_error = error\n        \n        # Short delay to prevent CPU hogging\n        wait(20, MSEC)\n    \n    # Stop the robot once target is reached\n    left_drive_smart.stop(BRAKE)\n    right_drive_smart.stop(BRAKE)\n    print(\"Target heading reached: Current= \",gps_20.heading(),\" Target= \",target_heading)\n\ndef turn_by_angle(angle_degrees, max_speed):\n    \"\"\"\n    Turn the robot by a relative angle using the GPS sensor\n    \n    Args:\n        angle_degrees: Angle to turn in degrees (positive=clockwise, negative=counter-clockwise)\n        max_speed: Maximum turning speed (0-100)\n    \"\"\"\n    # Get current heading\n    current_heading = gps_20.heading()\n    \n    # Calculate target heading\n    target_heading = normalize_heading(current_heading + angle_degrees)\n    \n    print(\"Starting relative turn of \",angle_degrees,\" degrees\")\n    print(\"Current heading: \",current_heading,\" Target heading: \",target_heading)\n    \n    # Execute the turn\n    turn_to_heading(target_heading, max_speed)\n    wait(100,MSEC)\n\n    if(gps_20.heading() != target_heading):\n        print (\"calling again...\\nheading: \", gps_20.heading(),\" target: \", target_heading)\n        turn_to_heading(target_heading, max_speed)\n   \n    if(gps_20.heading() != target_heading):\n        print (\"calling again...\\nheading: \", gps_20.heading(),\" target: \", target_heading)\n        turn_to_heading(target_heading, max_speed)\n\n# PID constants for straight driving correction\n# These values need tuning for your specific robot\n# kP = 0.1  # Proportional gain\n# kI = 0.01  # Integral gain\n# kD = 0.2   # Derivative gain\n\nkP = -0.01  # Proportional gain\nkI = -0.02  # Integral gain\nkD = 0.0   # Derivative gain\n\n# Maximum allowed integral value to prevent wind-up\nMAX_INTEGRAL = 50\n\n# Function to reset rotation sensors\ndef reset_rotations():\n    rotation_left.reset_position()\n    rotation_right.reset_position()\n    \n# Function to drive straight for a specific distance in degrees using PID\ndef drive_straight_pid(distance_deg, speed_pct):\n    # Reset rotation sensors\n    reset_rotations()\n    \n    # Target position and PID variables\n    target_position = abs(distance_deg)\n    direction = 1 if distance_deg > 0 else -1  # Determine direction\n    \n    # PID variables\n    prev_error = 0\n    integral = 0\n    \n    # Control loop variables\n    average_position = 0\n    last_time = brain.timer.time(MSEC)\n    \n    # Loop until we reach the target distance\n    while average_position < target_position:\n        # Calculate time delta for derivative calculation\n        \n        current_time = brain.timer.time(MSEC)\n        dt = current_time - last_time\n        dt = max(dt, 1)  # Prevent division by zero\n        last_time = current_time\n        \n        # Get current position from both rotation sensors\n        left_position = abs(rotation_left.position(DEGREES))\n        right_position = abs(rotation_right.position(DEGREES))\n        \n        # Calculate average position and error (difference between sensors)\n        average_position = (left_position + right_position) / 2\n        position_error = left_position - right_position\n        \n        # Calculate PID components\n        # Proportional term\n        p_term = position_error * kP\n        \n        # Integral term with anti-windup\n        integral += position_error * dt / 1000.0\n        integral = max(min(integral, MAX_INTEGRAL), -MAX_INTEGRAL)  # Clamp to prevent windup\n        i_term = integral * kI\n        \n        # Derivative term\n        derivative = (position_error - prev_error) / (dt / 1000.0)\n        d_term = derivative * kD\n        \n        # Calculate total correction\n        correction = p_term + i_term + d_term\n        \n        # Store error for next iteration\n        prev_error = position_error\n        \n        # Apply the correction to the motors\n        left_speed = speed_pct * direction + correction\n        right_speed = speed_pct * direction - correction\n        \n        # Constrain speeds to valid range (-100 to 100)\n        left_speed = max(min(left_speed, 100), -100)\n        right_speed = max(min(right_speed, 100), -100)\n        \n        # Set motor speeds\n        left_motor_a.spin(FORWARD, left_speed, PERCENT)\n        left_motor_b.spin(FORWARD, left_speed, PERCENT)\n        right_motor_a.spin(FORWARD, right_speed, PERCENT)\n        right_motor_b.spin(FORWARD, right_speed, PERCENT)\n        \n        # Small delay to avoid hogging CPU\n        wait(20, MSEC)\n        \n        # Display debug information\n        print(\"L: \",left_position,\" R: \",right_position,\" E: \",position_error,\" P: \",(average_position/target_position*100))\n        print(\"P: \",p_term,\" I: \",i_term,\" D: \",d_term,\"\\n\")\n        \n    # Stop all motors\n    left_motor_a.stop(BRAKE)\n    left_motor_b.stop(BRAKE)\n    right_motor_a.stop(BRAKE)\n    right_motor_b.stop(BRAKE)\n    \n    # brain.screen.set_cursor(6, 1)\n    # brain.screen.print(\"Drive complete!\")\n    print(\"Drive complete!\")\n    \n    return True\n\n# Function to aim for a specific distance and handle timeouts\ndef drive_distance_with_timeout(distance_deg, speed_pct, timeout_sec):\n     # Wait for rotation sensors to initialize\n    wait(100, MSEC)\n\n    # Start timer\n    timer = Timer()\n    \n    # Execute drive function with timeout\n    success = drive_straight_pid(distance_deg, speed_pct)\n    \n    # Check if timeout occurred\n    if timer.time(SECONDS) >= timeout_sec:\n        # brain.screen.set_cursor(7, 1)\n        # brain.screen.print(\"Drive timed out!\")\n        print(\"Drive timed out!\")\n        print(\"Drive complete!\")\n        \n        # Stop all motors\n        left_motor_a.stop(BRAKE)\n        left_motor_b.stop(BRAKE)\n        right_motor_a.stop(BRAKE)\n        right_motor_b.stop(BRAKE)\n        return False\n    \n    return success\n\ndef drive_distance_without_timeout(distance_deg, speed_pct):\n     # Wait for rotation sensors to initialize\n    wait(100, MSEC)\n\n    # Start timer\n    timer = Timer()\n    \n    # Execute drive function with timeout\n    success = drive_straight_pid(distance_deg, speed_pct)\n    \n    # Check if timeout occurred\n    # #if timer.time(SECONDS) >= timeout_sec:\n    #     # brain.screen.set_cursor(7, 1)\n    #     # brain.screen.print(\"Drive timed out!\")\n    #     print(\"Drive timed out!\")\n    #     print(\"Drive complete!\")\n        \n    #     # Stop all motors\n    #     left_motor_a.stop(BRAKE)\n    #     left_motor_b.stop(BRAKE)\n    #     right_motor_a.stop(BRAKE)\n    #     right_motor_b.stop(BRAKE)\n    #     return False\n    \n    return success\n\n\ndef ForwardToCoords(xGoal, yGoal) : \n    xGoal = xGoal \n    yGoal = yGoal \n    xPos = (gps_20.x_position(INCHES)) \n    yPos = (gps_20.y_position(INCHES)) \n    deg = math.sqrt((xGoal-xPos)*(xGoal-xPos)+(yGoal-yPos)*(yGoal-yPos)) \n    numberOfDegrees = (deg/wheelCircumference) * 360 \n    drive_distance_with_timeout(numberOfDegrees, 40, 100)#speed, 5)\n\ndef ReverseToCoords(xGoal, yGoal) : \n    xGoal = xGoal \n    yGoal = yGoal \n    xPos = (gps_20.x_position(INCHES)) \n    yPos = (gps_20.y_position(INCHES)) \n    deg = -math.sqrt((xGoal-xPos)*(xGoal-xPos)+(yGoal-yPos)*(yGoal-yPos)) \n    numberOfDegrees = (deg/wheelCircumference) * 360 \n    drive_distance_with_timeout(numberOfDegrees, 40, 100)#speed, 5)\n\ndef redPositiveTurnToPos(xGoal, yGoal) : \n    xGoal = xGoal \n    yGoal = yGoal\n    xPos = (gps_20.x_position(INCHES)) \n    yPos = (gps_20.y_position(INCHES)) \n    print(\"Current GPS heading: \",gps_20.heading()) \n    tol = 4 \n    if(yPos>yGoal and (xGoal+tol)>xPos and (xGoal-tol)<xPos) : \n        print(\"pos 7\") \n        turn_to_heading(180, 30) \n        print(\"pos 7\") \n    elif(yPos>yGoal and (xGoal+tol)>xPos and (xGoal-tol)<xPos) : \n        print(\"pos 8\") \n        turn_to_heading(0, 30) \n        print(\"pos 8\") \n    elif(xPos>xGoal) : \n        print(\"above\") \n        posTurn = 270-(180/math.pi)*math.atan((yGoal-yPos)/(xGoal-xPos)) \n        print(\"TurnHeading goal: \",posTurn) \n        turn_to_heading(posTurn, 30) \n        print(\"above\") \n    elif(xPos<xGoal) : \n        print(\"below\") \n        posTurn = 90-(180/math.pi)*math.atan((yGoal-yPos)/(xGoal-xPos)) \n        print(\"TurnHeading goal: \",posTurn) \n        turn_to_heading(posTurn, 30) \n\n\n\nwheelDiameter=3.25 # Inches\nwheelCircumference = math.pi * wheelDiameter\ntravelDistance = 36 # Inches\nerror = 5 # inches\n\n\ntravelDistance -= error\n\nnumberOfDegrees = (travelDistance/wheelCircumference) * 360\nspeed = 75\n\nturnAngle = 90\n\ndef desiredObjectExists(aiArray, objID):\n    for element in aiArray:\n        if(element.id == objID):\n            visionDetects = True;\n            return(True)\n    visionDetects = False\n    return(False)    \n\ndef chooseSnapshot(repeats, objId) :\n    ai_vision_10_objects = ai_vision_10.take_snapshot(AiVision.ALL_AIOBJS)\n    chosen = ai_vision_10_objects\n    i = 0\n    while (i<repeats):\n        ai_vision_10_objects = ai_vision_10.take_snapshot(AiVision.ALL_AIOBJS)\n        if desiredObjectExists(ai_vision_10_objects, objId):\n            chosen = ai_vision_10_objects\n            break\n        i = i+1\n    return chosen\n\ndef stakeScore(aiArray, arrayObj): \n    stakeRings = stakeRingCount(aiArray, arrayObj)\n    if stakeRings == 0: \n        stakeRings = 0.5\n    stakeScore = arrayObj.width-abs(arrayObj.centerX-160)+arrayObj.centerY/stakeRings\n    return(stakeScore)\n\ndef stakeRingCount(aiArray, arrayObj):\n    stakeRings = 0\n    if(desiredObjectExists(aiArray, 0)): \n        stakeX = arrayObj.centerX\n        stakeY = arrayObj.centerY\n        for element in aiArray:\n            if element.centerX<stakeX+10 and element.centerX>stakeX-10 and element.centerY< stakeY and (not element.id==0): \n                stakeRings = stakeRings + 1        \n  \n    return (stakeRings)\n\ndef goodStake(aiArray, arrayObj):\n    stakeRings = stakeRingCount(aiArray, arrayObj)\n    if (stakeRings<6):\n        return (True)\n    return(False)\n\ndef chooseStake(aiArray) : \n    bestPos = 0\n    pos = 0\n    for element in aiArray:\n        if (element.id==0) : \n            if goodStake(aiArray, element):\n                bestPos = pos\n                break\n        pos = pos+1\n    pos = 0\n    for element in aiArray:\n        if (element.id==0) : \n            if(stakeScore(aiArray, element)>stakeScore(aiArray, aiArray[bestPos])):\n                if goodStake(aiArray, element):\n                    bestPos = pos\n        pos = pos+1\n    if(not goodStake(aiArray, aiArray[bestPos])):\n        bestPos = -1;\n    return bestPos\n\ndef turnToStake():\n    ai_vision_10_objects = ai_vision_10.take_snapshot(AiVision.ALL_AIOBJS)\n    while not (ai_vision_10_objects[chooseStake(chooseSnapshot(5, 0))].centerX>=158 and ai_vision_10_objects[chooseStake(chooseSnapshot(5, 0))].centerX<=162):\n        if ai_vision_10_objects[chooseStake(chooseSnapshot(5, 0))].centerX>162:\n            turn_by_angle(3, 30)\n        elif ai_vision_10_objects[chooseStake(chooseSnapshot(5, 0))].centerX<158:\n            turn_by_angle(-3, 30)\n        if not desiredObjectExists(chooseSnapshot(5, 0), 0):\n            break\ndef climb2():\n    climb.set_velocity(20, PERCENT)\n    climb.set_max_torque(85, PERCENT)\n    climb.spin_to_position(420, DEGREES)\n    wait(1, SECONDS)\n    climb.spin_to_position(-10, DEGREES)\n\n   \ndef isolation():\n    print(\"\")\n    wait(1,SECONDS)\n    print(\"\")\n    numDegrees = (travelDistance/wheelCircumference)*360\n    # drive_distance_with_timeout(numDegrees, 60, 5)\n    # turn_by_angle(90, 35)\n\n    # paths - red neg/blue pos\n\n    arm.set_velocity(30, PERCENT)\n\n    wait(2,SECONDS)\n\n\n    # #Drive to alliance Stake\n    numDegrees = (34/wheelCircumference)*360\n    drive_distance_with_timeout(numDegrees, 20, 2)\n    wait(1, SECONDS)\n\n    turn_by_angle(80, 25)\n\n    numDegrees = (2/wheelCircumference)*360\n    drive_distance_with_timeout(numDegrees, 20, 2)\n\n    # #score on alliance Stake\n    armRot.set_position(-215, DEGREES)\n    arm.spin_to_position(armRot.position(DEGREES),DEGREES)\n    #Move away from alliance stake\n    numDegrees = (-20/wheelCircumference)*360\n    drive_distance_with_timeout(numDegrees, 20, 2)\n    wait(2,SECONDS)\n\n    # turn_by_angle(-106, 35) #60 for blue neg -106 for red neg/blue pos\n\n    # climb.set_velocity(20, PERCENT)\n    # climb.set_max_torque(85, PERCENT)\n    # climb.spin_to_position(420, DEGREES)\n\n    # numDegrees = (23/wheelCircumference)*360\n    # drive_distance_with_timeout(numDegrees, 20, 2)\n    # drivetrain.drive(FORWARD)\n    # wait(5.45, SECONDS)\n    # drivetrain.stop()\n\n    armRot.set_position(-215, DEGREES)\n    arm.spin_to_position(armRot.position(DEGREES),DEGREES)\n\n    climb.spin_to_position(-10, DEGREES)\n\n    # #turn to corner\n    # turn_by_angle(93, 35)\n    # wait(0.5, SECONDS)\n    # armRot.set_position(-232, DEGREES)\n    # arm.spin_to_position(armRot.position(DEGREES),DEGREES)\n\n    # #move to corner\n    # numDegrees = (25/wheelCircumference)*360\n    # drive_distance_with_timeout(numDegrees, 40, 2)\n    # wait(5, MSEC)\n    # turn_by_angle(-2, 35)\n    # wait(0.75, SECONDS)\n    # numDegrees = (10/wheelCircumference)*360\n    # drive_distance_with_timeout(numDegrees, 20, 2)\n    # wait(0.5, SECONDS)\n\n    # #lift out ring from corner (TURN IT TO THE BACK)\n    # armRot.set_position(-80, DEGREES)\n    # arm.set_velocity(20, PERCENT)\n    # arm.spin_to_position(armRot.position(DEGREES),DEGREES)\n    # numDegrees = (-8/wheelCircumference)*360\n    # drive_distance_with_timeout(numDegrees, 40, 2)\n    # wait(5, MSEC)\n\n    # #Back out from corner\n    # numDegrees = (-10/wheelCircumference)*360\n    # drive_distance_with_timeout(numDegrees, 20, 2)\n    # wait(0.5, SECONDS)\n\n    # #move and clear obstructing ring\n    # turn_to_heading(90, 30)\n    # wait(5, MSEC)\n    # ForwardToCoords(-28, 24)\n    # wait(5, MSEC)\n    # turn_to_heading(180, 30)\n    # wait(5, MSEC)\n    # numDegrees = (14/wheelCircumference)*360\n    # drive_distance_with_timeout(numDegrees, 40, 2)\n    # wait(5, MSEC)\n    # numDegrees = (-4/wheelCircumference)*360\n    # drive_distance_with_timeout(numDegrees, 40, 2)\n    # wait(5, MSEC)\n\n    # redPositiveTurnToPos(0, 0)\n    # #ARM VERTICAL CHANGE VALUES\n    # armRot.set_position(-80, DEGREES)\n    # arm.set_velocity(20, PERCENT)\n    # arm.spin_to_position(armRot.position(DEGREES),DEGREES)\n\n    # ForwardToCoords(-12, 12)\n    # # turn_by_angle(178.5, 35)\n    # # numDegrees = (16/wheelCircumference)*360\n    # # drive_distance_with_timeout(numDegrees, 40, 2)\n    # # turn_by_angle(25, 35)\n    # # wait(0.75, SECONDS)\n\n    # blue paths\n\n\n    \ndef interactive():\n    print(\"Start Interactive\")\n    wait(1.5, SECONDS)\n    print(\"Interactive Starting\")\n    #Arm back down\n    armRot.set_position(-80, DEGREES)\n    arm.set_velocity(20, PERCENT)\n    arm.spin_to_position(armRot.position(DEGREES),DEGREES)\n    #Turn to middle stake\n    redPositiveTurnToPos(0, 0)\n    ai_vision_10_objects = ai_vision_10.take_snapshot(AiVision.ALL_AIOBJS)\n    if desiredObjectExists(chooseSnapshot(15, 0), 0): \n        turnToStake()\n        wait(5, MSEC)\n        numDegrees = (19/wheelCircumference)*360\n        drive_distance_with_timeout(numDegrees, 40, 2)\n        wait(5, MSEC)\n        #Score on mogul\n        armRot.set_position(-230, DEGREES)\n        arm.set_velocity(30, PERCENT)\n        arm.spin_to_position(armRot.position(DEGREES),DEGREES)\n    ForwardToCoords(-24, -24)\n    wait(5, MSEC)\n    turn_by_angle(40, 30)\n    wait(5, MSEC)\n    numDegrees = (5/wheelCircumference)*360\n    drive_distance_with_timeout(numDegrees, 40, 2)\n    wait(5, MSEC)\n    #unclamp from stake\n    numDegrees = (-5/wheelCircumference)*360\n    drive_distance_with_timeout(numDegrees, 40, 2)\n    #turn to opponent positive\n    redPositiveTurnToPos(-72, -72)\n    ForwardToCoords(-50, -50)\n    if desiredObjectExists(chooseSnapshot(15, 0), 0): \n        turnToStake()\n\n        \niso = False\ndef main():\n    isolation()\n    #Set to true\n    # iso = False\n    # if iso:\n    #     isolation()\n    # else:\n    #     interactive()\n    # iso = False\n    # if not iso:\n    #     interactive()\n# Run the main program\nprint(\"running main\")\n#monitor_thread = task.spawn(monitor_motor)\nmain()    ","textLanguage":"python","robotConfig":[{"port":[17,1,18,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio6_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"11.25","unit":"in","wheelbase":"9","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[8],"name":"optical_8","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3,4],"name":"arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[15,5],"name":"climb","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[7],"name":"armRot","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"},"triportSourcePort":22},{"port":[19],"name":"rotation_right","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"},"triportSourcePort":22},{"port":[16],"name":"rotation_left","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"},"triportSourcePort":22},{"port":[20],"name":"gps_20","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"-6","yOffsetUnit":"in","thetaOffset":"180"},"triportSourcePort":22},{"port":[10],"name":"ai_vision_10","customName":false,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}